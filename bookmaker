#!/usr/bin/env python

import argparse
from tempfile import mkdtemp
import os, shutil, commands
import sys

def parseargs():
	# argparse was new in python 2.7
	parser = argparse.ArgumentParser(description='DIY Books from PDFs')

	parser.add_argument('--paper', type=paper, default='a4', help='a4 | letter (Default is a4)')
	parser.add_argument('--type', type=btype, default='auto', help='auto | chapbook | perfect (Default is auto)')
	parser.add_argument('--trim', type=trim, default='even-odd', help='even-odd | document | per-page (Default is even-odd)')
	parser.add_argument('input', help='PDF to convert into a book')
	parser.add_argument('output', help='Where to store the new book')

	return parser.parse_args()

def getoutput(cmd):
	status, output = commands.getstatusoutput(cmd)
	if status:
		raise Exception("Error when executing: %s\n%s" % (cmd, output))
	return output

# validates book type selection
def btype(string):
	string = string.lower()
	if string not in ['auto', 'chapbook', 'perfect']:
		raise argparse.ArgumentTypeError("must be auto, chapbook, or perfect.")
	return string

# validates paper selection
def paper(string):
	string = string.lower()
	if string not in ['a4', 'letter']:
		raise argparse.ArgumentTypeError("must be a4 or letter.")
	return string

def trim(string):
	string = string.lower()
	if string not in ['even-odd', 'document', 'per-page']:
		raise argparse.ArgumentTypeError("must be even-odd, document, or per-page.")
	return string

def main():
	args = parseargs()

	tmpdir = mkdtemp()
	shutil.copyfile(args.input, os.path.join(tmpdir, 'input.pdf'))

	wd = os.getcwd()
	os.chdir(tmpdir)

	print 'Inspecting PDF'
	boundingboxes = getoutput('gs -sDEVICE=bbox -dSAFER -dPARANOIDSAFER -dNOPAUSE -dBATCH input.pdf 2<&1|grep %%HiResBoundingBox').splitlines()
	npages = len(boundingboxes)
	
	if args.type == 'auto':
		if npages <= 24:
			args.type = 'chapbook'
		else:
			args.type = 'perfect'
	types = {'chapbook':'chapbook', 'perfect':'perfect bound book'}
	print 'Creating a PDF for a %s on %s paper' % (types[args.type], args.paper)

	if(args.trim == 'even-odd'):
		odd_box = map(float, boundingboxes[0].split()[1:])
		even_box = map(float, boundingboxes[1].split()[1:])
		for page in xrange(1, npages):
			box = map(float, boundingboxes[page].split()[1:]) # [134, 127, 482, 677]
			if (page + 1) % 2 == 0:
				# even pages
				even_box[0] = min(even_box[0], box[0]) #left
				even_box[1] = min(even_box[1], box[1]) #bottom
				even_box[2] = max(even_box[2], box[2]) #top
				even_box[3] = max(even_box[3], box[3]) #right
			else:
				# odd pages
				odd_box[0] = min(odd_box[0], box[0]) #left
				odd_box[1] = min(odd_box[1], box[1]) #bottom
				odd_box[2] = max(odd_box[2], box[2]) #top
				odd_box[3] = max(odd_box[3], box[3]) #right
	elif (args.trim == 'document'):
		documentbox = map(float, boundingboxes[0].split()[1:])
		for page in xrange(1, npages):
			box = map(float, boundingboxes[page].split()[1:]) # [134, 127, 482, 677]
			documentbox[0] = min(documentbox[0], box[0]) #left
			documentbox[1] = min(documentbox[1], box[1]) #bottom
			documentbox[2] = max(documentbox[2], box[2]) #top
			documentbox[3] = max(documentbox[3], box[3]) #right
	# Nothing to do for per-page

	print 'Trimming Pages'
	# --bbox "--bbox "<left> <bottom> <right> <top>""
	if (args.trim == 'even-odd'):
		even_bboxstring = '--bbox-even "%f %f %f %f"' % tuple(even_box)
		odd_bboxstring = '--bbox-odd "%f %f %f %f"' % tuple(odd_box)
		getoutput('pdfcrop --restricted %s %s input.pdf cropped.pdf' % (even_bboxstring, odd_bboxstring))
	elif (args.trim == 'document'):
		bboxstring = '--bbox "%f %f %f %f"' % tuple(documentbox)
		getoutput('pdfcrop --restricted %s input.pdf cropped.pdf' % bboxstring)
	else: # per-page
		getoutput('pdfcrop --restricted input.pdf cropped.pdf')

	print 'Imposing Pages'
	intermediate_tex = os.path.join(tmpdir, 'intermediate.tex')
	intermediate_pdf = os.path.join(tmpdir, 'intermediate.pdf')
	intermediate = open(intermediate_tex, 'w')

	papersizes = {'a4':'\setuppapersize[A5][A4,landscape]', 'letter':"\definepapersize[halfletter][width=5.5in,height=8.5in]\n\setuppapersize[halfletter][letter,landscape]"}
	intermediate.write("%s\n" % papersizes[args.paper])

	typesetups = {'chapbook':'\setuparranging[2UP,doublesided]', 'perfect':'\setuparranging[2*2,doublesided]'}
	intermediate.write("%s\n" % typesetups[args.type])

	intermediate.write('''
\setuplayout[header=0cm,footer=1mm,width=fit,height=fit,topspace=12.7mm,backspace=12.7mm]
\setuppagenumbering[location=inright,alternative=doublesided]
\starttext
''')

	for page in range(1, npages + 1):
		intermediate.write('\externalfigure[cropped.pdf][page=%d, factor=fit]\n' % page)

	intermediate.write('\n\stoptext\n')
	intermediate.close()

	getoutput('context --paranoid --batchmode --noconsole %s' % intermediate_tex)

	os.chdir(wd)
	shutil.move(intermediate_pdf, args.output)

	# cleanup
	shutil.rmtree(tmpdir)

	print 'Done'

if __name__ == '__main__':
	main()