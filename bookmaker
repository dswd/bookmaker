#!/usr/bin/env python

import argparse
from commands import getoutput
from tempfile import mkdtemp
import os
import sys

def parseargs():
	# argparse was new in python 2.7
	parser = argparse.ArgumentParser(description='DIY Books from PDFs')

	parser.add_argument('--paper', type=paper, default='a4', help='a4 | letter (Default is a4)')
	parser.add_argument('--type', type=type, default='auto', help='auto | chapbook | perfect (Default is auto)')
	parser.add_argument('input', help='PDF to convert into a book')
	parser.add_argument('output', help='Where to store the new book')

	return parser.parse_args()

# validates book type selection
def type(string):
	string = string.lower()
	if string not in ['auto', 'chapbook', 'perfect']:
		raise argparse.ArgumentTypeError("must be auto, chapbook, or perfect.")
	return string

# validates paper selection
def paper(string):
	string = string.lower()
	if string not in ['a4', 'letter']:
		raise argparse.ArgumentTypeError("must be a4 or letter.")
	return string

def main():
	args = parseargs()

	npages = int(getoutput('gs -sDEVICE=bbox -dNOPAUSE -dBATCH "' + args.input + '" 2<&1|grep -c %%BoundingBox'))
	if args.type == 'auto':
		if npages <= 24:
			args.type = 'chapbook'
		else:
			arge.type = 'perfect'
	
	print 'Creating a ' + args.type + ' on ' + args.paper + ' paper'

	print npages, 'pages'

	papersizes = {'a4':'\setuppapersize[A5][A4,landscape]', 'letter':"\definepapersize[halfletter][width=5.5in,height=8.5in]\n\setuppapersize[halfletter][letter,landscape]"}
	typesetups = {'chapbook':'\setuparranging[2UP,doublesided]', 'book':'\setuparranging[2*2,doublesided]'}

	tmpdir = mkdtemp()
	print tmpdir
	wd = os.getcwd()
	getoutput('cp ' + args.input + ' ' + tmpdir + os.sep + 'input.pdf')
	os.chdir(tmpdir)

	print 'Trimming pages'
	getoutput('pdfcrop input.pdf cropped.pdf')

	print 'Imposing...'
	intermediate_tex = tmpdir + os.sep + 'intermediate.tex'
	intermediate_pdf = tmpdir + os.sep + 'intermediate.pdf'
	intermediate = open(intermediate_tex, 'w')
	intermediate.write(papersizes[args.paper] + '\n')
	intermediate.write(typesetups[args.type] + '\n')
	intermediate.write('''
\setuplayout[header=0cm,footer=1mm,width=fit,height=fit,topspace=12.7mm,backspace=12.7mm]
\setuppagenumbering[location=inright,alternative=doublesided]
\starttext
''')

	page = 1
	while (page <= npages):
		intermediate.write('\externalfigure[cropped.pdf][page=' + str(page) + ', factor=fit]\n')
		page = page + 1

	intermediate.write('\n\stoptext\n')
	intermediate.close()

	getoutput('context --batchmode --noconsole ' + intermediate_tex)

	os.chdir(wd)
	getoutput('mv "' + intermediate_pdf + '" "' + args.output + '"')

	# cleanup
	files = os.listdir(tmpdir)
	os.chdir(tmpdir)
	for f in files:
		os.remove(f)
	os.rmdir(tmpdir)

if __name__ == '__main__':
	main()